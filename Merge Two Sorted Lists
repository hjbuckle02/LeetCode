You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.
''' 
Example 1:
1 -> 2 -> 4
1 -> 3 -> 4
1 -> 1 -> 2 -> 3 -> 4 -> 4

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
'''
Steps:
1. Take the input of two lists and check if they are empty.
2. First determine the smallest figure of the result list smaller htan the figures of the given lizsts.
3. Loop through the node of the lists until the lists are traversed.
4. Identify the smaller nodes of the lists and add it to the result list.
5. Once the loop is complete, the lists mya have nodes remaining. Add to the resultant lists.
'''
#Raw Code
class ListNode:
    def __init__(self, val=0, nextNode=None):
        self.val = val
        self.next = nextNode

def mergeTwoLists(l1: ListNode, l2: ListNode) -> ListNode:
  if l1 is None:
    return l2
  if l2 is None:
    return l1
  if l1.val < l2.val:
    temp = head = ListNode(l1.val)
    l1 = l1.next
#Conditional Statement: 
- This line checks if the value of the current node in l1 is less than the value of the current node in l2.
- Node Creation: If the condition is true, a new ListNode is created with the value of the current node in l1 (l1.val). 
- This new node is assigned to both temp and head.
- Advance Pointer: The l1 pointer is advanced to the next node (l1.next).
 #
  else:
    temp = head = ListNode(l2.val)
    l2 = l2.next

 while l1 is not     None and l2 is not None:
        if l1.val < l2.val:
            temp.next = ListNode(l1.val)
            l1 = l1.next
        else:
            temp.next = ListNode(l2.val)
            l2 = l2.next
        temp = temp.next
    while l1 is not None:
        temp.next = ListNode(l1.val)
        l1 = l1.next
        temp = temp.next
    while l2 is not None:
        temp.next = ListNode(l2.val)
        l2 = l2.next
        temp = temp.next
    return head
